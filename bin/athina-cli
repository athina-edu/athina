#!/usr/bin/env python3

# Required modules
import sys
import argparse
import filelock
from athina.users import *
from athina.logger import *
from athina.tester import *
from athina.configuration import *

# Variable modules (extensions, e.g., canvas or blackboard)
from athina.canvas import *
from athina.git import *


def lock_process():
    # Allow only one instance
    lock_file = filelock.FileLock("/run/lock/athina.py.lock")
    try:
        lock_file.acquire(timeout=10)
    except filelock.Timeout:
        sys.exit("Another instance of athina.py is running. If this is an error, delete athina.py.lock")
    return lock_file


def parse_command_line():
    """
    Command line arguments
    :return:
    """
    parser = argparse.ArgumentParser(
        description='ATHINA - Automated Testing Homework Interface for N Assignments')
    parser.add_argument(
        '--config', metavar='c', required=False, type=str, help='Configuration File')
    parser.add_argument(
        '--verbose', metavar='v', required=False, type=bool, help='Verbose mode, default False', default=False)
    parser.add_argument(
        '--simulate', metavar='v', required=False, type=bool, help='Simulate but never submit grade', default=False)
    parser.add_argument(
        '--forced_testing', metavar='f', required=False, help='Force (re)-grading for a student name', type=str)
    parser.add_argument(
        '--repo_url_testing', metavar='r', required=False,
        help='Test a git config on a particular repo (this exclusively for testing configuration)', type=str)
    parser.add_argument(
        '--json', metavar='j', required=False, type=str, help='JSON list of folders with Athina cfg files and tests')
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    # Athina's directory
    DIR_PATH = os.path.dirname(os.path.realpath(__file__))

    # Get command line parameters
    ARGS = parse_command_line()

    # Lock process so that duplicates won't run
    lock = lock_process()

    # Setup logger
    LOGGER = Logger()

    # helper_functions also imports builtins, a way to make global variable
    LOGGER.verbose = ARGS.verbose

    # Build the list of assignments to check (Athina Web = json format, command line = 1 assignment only)
    RUN_LIST = []
    if ARGS.json is not None:
        RUN_LIST = request_url(ARGS.json, method="get", return_type="json")
    elif ARGS.config is not None:
        RUN_LIST.append({'directory': ARGS.config, 'simulate': ARGS.simulate})
    else:
        raise SyntaxError("You need to provide either --config or --json.")

    # Iterate through each assignment
    for RUN_RECORD in RUN_LIST:
        # Build configuration object
        CONFIGURATION = Configuration(logger=LOGGER)
        if CONFIGURATION.load_configuration(RUN_RECORD['directory']) is False:
            # Unable to read configuration file (or find it)
            continue  # skip to next item in RUN_LIST

        # Obtain simulation parameters and specify log file
        assert type(RUN_RECORD['simulate']) is bool, \
            "Simulate is not properly read. " \
            "Either the parameter was passed wrong or the code needs fixing."
        CONFIGURATION.simulate = RUN_RECORD['simulate']
        LOGGER.log_file = "%s/%s.log" % (CONFIGURATION.config_dir, CONFIGURATION.config_filename)

        # Starting statement
        LOGGER.vprint("###\nStarting - %s\n###" % datetime.now(timezone.utc).isoformat(' '))

        # Load e-learning platform functions
        E_LEARNING = Canvas(CONFIGURATION.auth_token,
                            CONFIGURATION.course_id,
                            CONFIGURATION.assignment_id,
                            LOGGER,
                            CONFIGURATION.submit_results_as_file)

        # Begin gathering data from Canvas
        USER_DATA = Users(logger=LOGGER)
        USER_DATA = USER_DATA.load("%s/%s.pkl" % (CONFIGURATION.config_dir, CONFIGURATION.assignment_id))

        # No point contacting elearning platform if no auth token is provided
        if CONFIGURATION.auth_token != "":
            USER_DATA = E_LEARNING.get_all_submissions(USER_DATA)
            if len(USER_DATA.db) > 0:
                USER_DATA = E_LEARNING.get_additional_user_info(USER_DATA)
                if CONFIGURATION.enforce_due_date:
                    CONFIGURATION.due_date = E_LEARNING.get_assignment_due_date()
                else:
                    CONFIGURATION.due_date = dateutil.parser.parse("2050-01-01 00:00:00 +00:00")  # a day in the future
                # Check if more than N times the same URL in usrdb
                USER_DATA.check_duplicate_url(same_url_limit=CONFIGURATION.same_url_limit)

        # Build Repository Object
        REPOSITORY = Repository(USER_DATA, LOGGER, CONFIGURATION, E_LEARNING)

        # Build Tester Object
        TESTER = Tester(USER_DATA, LOGGER, CONFIGURATION, E_LEARNING, REPOSITORY)

        if ARGS.forced_testing is not None:
            # Test specific user
            # FIXME: TESTER is returned the changed userdb object
            REPOSITORY.check_repository_changes([value.user_id for key, value in USER_DATA.db.items()
                                                 if value.user_fullname == ARGS.forced_testing][0])
            TESTER.process_student_assignment([value.user_id for key, value in USER_DATA.db.items()
                                               if value.user_fullname == ARGS.forced_testing][0], forced_testing=True)
        elif ARGS.repo_url_testing is not None:
            # Creating tmp user and simulating the test for the provided repository
            USER_DATA.db[1] = USER_DATA.User(user_id=1)
            USER_DATA.db[1].repository_url = ARGS.repo_url_testing
            USER_DATA.db[1].url_date = datetime(1, 1, 1, 0, 0).replace(tzinfo=timezone.utc)
            USER_DATA.db[1].new_url = True
            USER_DATA.db[1].commit_date = datetime(1, 1, 1, 0, 0).replace(tzinfo=timezone.utc)
            LOGGER.verbose = True
            LOGGER.print_debug_messages = True
            CONFIGURATION.simulate = True
            REPOSITORY.check_repository_changes(1)
            TESTER.process_student_assignment(1)
            LOGGER.vprint("Repo testing complete!")
            exit(0)  # This is used for testing so no further processing is necessary
        else:
            # Start testing changed records (new or updated) if any exist
            TESTER.start_testing_db()

        # Initiate plagiarism checks
        if datetime.now(timezone.utc).hour == CONFIGURATION.check_plagiarism_hour:
            TESTER.plagiarism_checks_on_users()

        # Save database changes
        if CONFIGURATION.simulate is False:
            USER_DATA.save("%s/%s.pkl" % (CONFIGURATION.config_dir, CONFIGURATION.assignment_id))
            os.chmod("%s/%s.pkl" % (CONFIGURATION.config_dir, CONFIGURATION.assignment_id), 0o666)
        if LOGGER.verbose is False:
            subprocess.run("echo \"$(tail -3000 '%s')\" > '%s'" % (LOGGER.log_file, LOGGER.log_file), shell=True)
            os.chmod(LOGGER.log_file, 0o666)
        # In case this script is run as another user the repo needs to be also set to be editable by anyone
        try:
            os.chmod("%s/repodata%s" % (CONFIGURATION.config_dir, CONFIGURATION.assignment_id), 0o777)
        except FileNotFoundError:
            pass

        LOGGER.vprint("###\nFinished - %s\n###" % datetime.now(timezone.utc).isoformat(' '))

    # Closing statement
    lock.release()
